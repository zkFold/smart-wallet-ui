import { Backend, WalletTx, ProofBytes } from './src/Backend';
import CSL from '@emurgo/cardano-serialization-lib-nodejs';

BigInt.prototype.toJSON = function () {
  return JSON.rawJSON(this.toString()); 
};

const proofBytes: ProofBytes = {
    "cmA_bytes": "393766316433613733313937643739343236393536333863346661396163306663333638386334663937373462393035613134653361336631373162616335383663353565383366663937613161656666623361663030616462323263366262",
    "cmB_bytes": "393766316433613733313937643739343236393536333863346661396163306663333638386334663937373462393035613134653361336631373162616335383663353565383366663937613161656666623361663030616462323263366262",
    "cmC_bytes": "623132333661356332663866323965333635663338343538666239353634653265613666383530343165666163663837303739613734353664383631333261643233313232313262636463613364373830656430393537396532383537343135",
    "cmF_bytes": "633030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030",
    "cmH1_bytes": "633030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030",
    "cmH2_bytes": "633030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030",
    "cmZ1_bytes": "613935316661346136366334386264623634366438376337313738336635646362386633616138313231393536346564383336393633333863336266633135366635353031643466323636613763393235386565343563303233313862646537",
    "cmZ2_bytes": "393766316433613733313937643739343236393536333863346661396163306663333638386334663937373462393035613134653361336631373162616335383663353565383366663937613161656666623361663030616462323263366262",
    "cmQlow_bytes": "623033346330653239383838636436383633333834356266633037376565636163326238636164623539663535303436303630393664306637643331383837323734373737643632303234363538343737303538626562373735366662656236",
    "cmQmid_bytes": "623462313730313934386435643265333665313838393533346365373534346133636331623736303461323465386464633636316233653936623161616239303638373466393461303436343761633563633232386561376563363638356136",
    "cmQhigh_bytes": "633030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030",
    "proof1_bytes": "623330386335373739363436313936383535306632386432333833396166373237323361333130383332363332613139653961623531326134613565636234633863383935306164653032353737323439353032323231333736396133663464",
    "proof2_bytes": "623365343262343835303035643963326261346136366466626234646566323433336439326137623166643734376566346165643462356635653934343037396264653739616431646135383035333539376234626538313934373233666331",
    "a_xi_int": 1n,
    "b_xi_int": 1n,
    "c_xi_int": 48380510586722627616411267202495116783057255243693228940120047704204371350546n,
    "s1_xi_int": 10368790864104277489349149849901642613910605061180645600781012523028298814297n,
    "s2_xi_int": 29133202091870269236732546656522855889661645594339077247007036693772071783753n,
    "f_xi_int": 0n,
    "t_xi_int": 0n,
    "t_xi'_int": 0n,
    "z1_xi'_int": 40497370593942275679614638124878515092846558874156949013549943373738078556493n,
    "z2_xi'_int": 1n,
    "h1_xi'_int": 0n,
    "h2_xi_int": 0n,
    "l1_xi": 37713268627753681891487380051493928725054683102581668523304176199511429320989n
};

function harden(num: number): number {
  return 0x80000000 + num;
};

const prvkey = CSL.Bip32PrivateKey
      .generate_ed25519_bip32()
      .derive(harden(1852)) // purpose
      .derive(harden(1815)) // coin type
      .derive(harden(0)) // account #0
      .derive(0)
      .derive(0);

const pubkey = prvkey.to_public();

const jwt = "{foo: \"bar\"}.{baz:\"test\",email:\"test@zkfold.io\"}";

async function main() {
    const backend = new Backend('http://localhost:8082', '123');
    const addr = await backend.walletAddress('test@zkfold.io');
    console.log(addr.to_bech32());
    console.log(pubkey.to_raw_key().hash().to_hex());
    const walletTx = await backend.createWallet("test@zkfold.io", jwt, pubkey.to_raw_key().hash().to_hex(), proofBytes);
    const txId = await backend.submitTx(walletTx.transaction);
    console.log(txId);
//    const utxo = await backend.addressUtxo(CSL.Address.from_bech32("addr_test1wqlcn3pks3xdptxjw9pqrqtcx6ev694sstsruw3phd57ttg0lh0zq"));
//    console.log(utxo);
};

main();
